import Mathlib.Algebra.Group.Basic

class One‚ÇÅ (Œ± : Type) where
  one : Œ±

#check One‚ÇÅ.one

example (Œ± : Type) [One‚ÇÅ Œ±] : Œ± := One‚ÇÅ.one

@[class] structure One‚ÇÇ (Œ± : Type) where
  one : Œ±

#check One‚ÇÇ.one

example (Œ± : Type) [s :One‚ÇÇ Œ±] : Œ± := One‚ÇÇ.one s

notation "ùüô" => One‚ÇÅ.one

example [One‚ÇÅ Œ±] : Œ± := ùüô

class Dia‚ÇÅ (Œ± : Type) where
  dia : Œ± ‚Üí Œ± ‚Üí Œ±

infixl:70 " ‚¨ù " => Dia‚ÇÅ.dia

class Semigroup‚ÇÅ (Œ± : Type) where
  toDia‚ÇÅ : Dia‚ÇÅ Œ±
  dia_assoc : ‚àÄ a b c : Œ±, a ‚¨ù b ‚¨ù c = a ‚¨ù (b ‚¨ù c)

example {Œ± : Type} [Dia‚ÇÅ Œ±] [Semigroup‚ÇÅ Œ±] (a b : Œ±) : Œ± := a ‚¨ù b

attribute [instance] Semigroup‚ÇÅ.toDia‚ÇÅ

example {Œ± : Type} [Semigroup‚ÇÅ Œ±] (a b : Œ±) : Œ± := a ‚¨ù b

class Semigroup‚ÇÇ (Œ± : Type) extends Dia‚ÇÅ Œ± where
  dia_assoc : ‚àÄ a b c : Œ±, a ‚¨ù b ‚¨ù c = a ‚¨ù (b ‚¨ù c)

example {Œ± : Type} [Semigroup‚ÇÇ Œ±] (a b : Œ±) : Œ± := a ‚¨ù b

class DiaOneClass‚ÇÅ (Œ± : Type) extends One‚ÇÅ Œ±, Dia‚ÇÅ Œ± where
  one_dia : ‚àÄ a : Œ±, ùüô ‚¨ù a = a
  dia_one : ‚àÄ a : Œ±, a ‚¨ù ùüô = a

set_option trace.Meta.synthInstance true in
example {Œ± : Type} [DiaOneClass‚ÇÅ Œ±] (a b : Œ±) : Prop := a ‚¨ù b = ùüô


class Monoid‚ÇÅ (Œ± : Type) extends Semigroup‚ÇÅ Œ±, DiaOneClass‚ÇÅ Œ±


example {Œ± : Type} [Monoid‚ÇÅ Œ±] :
  (Monoid‚ÇÅ.toSemigroup‚ÇÅ.toDia‚ÇÅ.dia : Œ± ‚Üí Œ± ‚Üí Œ±) = Monoid‚ÇÅ.toDiaOneClass‚ÇÅ.toDia‚ÇÅ.dia := rfl

-- This runs into the problem of having two separate `Dia‚ÇÅ` instances
class Monoid‚ÇÇ (Œ± : Type) where
  toSemigroup‚ÇÅ : Semigroup‚ÇÅ Œ±
  toDiaOneClass‚ÇÅ : DiaOneClass‚ÇÅ Œ±

-- This extension equality also works for structures

/-
Monoid‚ÇÅ.mk {Œ± : Type} [toSemigroup‚ÇÅ : Semigroup‚ÇÅ Œ±] [toOne‚ÇÅ : One‚ÇÅ Œ±] (one_dia : ‚àÄ (a : Œ±), ùüô ‚¨ù a = a)
  (dia_one : ‚àÄ (a : Œ±), a ‚¨ù ùüô = a) : Monoid‚ÇÅ Œ±

Note: the DiaOneClass‚ÇÅ instance is torn apart to have compatible Dia‚ÇÅ instance with Semigroup‚ÇÅ
-/
#check Monoid‚ÇÅ.mk

#check Monoid‚ÇÅ.toSemigroup‚ÇÅ
#check Monoid‚ÇÅ.toDiaOneClass‚ÇÅ


class Inv‚ÇÅ (Œ± : Type) where
  /-- The inversion function -/
  inv : Œ± ‚Üí Œ±

@[inherit_doc]
postfix:max "‚Åª¬π" => Inv‚ÇÅ.inv

class Group‚ÇÅ (G : Type) extends Monoid‚ÇÅ G, Inv‚ÇÅ G where
  inv_dia : ‚àÄ (a : G), a‚Åª¬π ‚¨ù a = ùüô

-- This makes it easier to invoke these properties to prove theorems
export DiaOneClass‚ÇÅ (one_dia dia_one)
export Semigroup‚ÇÅ (dia_assoc)
export Group‚ÇÅ (inv_dia)

theorem left_inv_eq_right_inv‚ÇÅ {M : Type} [Monoid‚ÇÅ M] {a b c : M} (hba : b ‚¨ù a = ùüô) (hac : a ‚¨ù c = ùüô) : b = c :=
  calc
    b = b ‚¨ù ùüô := by rw [dia_one]
    _ = b ‚¨ù (a ‚¨ù c) := by rw [hac]
    _ = b ‚¨ù a ‚¨ù c := by rw [dia_assoc]
    _ = ùüô ‚¨ù c := by rw [hba]
    _ = c := by rw [one_dia]

-- more succinct proof may be possible if I tag everything with simp or aesop

theorem inv_eq_of_dia [Group‚ÇÅ G] {a b : G} (h : a ‚¨ù b = ùüô) : a‚Åª¬π = b := by
  exact left_inv_eq_right_inv‚ÇÅ (inv_dia a) h

theorem dia_inv [Group‚ÇÅ G] (a : G) : a ‚¨ù a‚Åª¬π = ùüô := by
  rw [‚Üê inv_dia a‚Åª¬π, inv_eq_of_dia (inv_dia a)]

class AddSemigroup‚ÇÉ (Œ± : Type) extends Add Œ± where
/-- Addition is associative -/
  add_assoc‚ÇÉ : ‚àÄ a b c : Œ±, a + b + c = a + (b + c)

@[to_additive AddSemigroup‚ÇÉ]
class Semigroup‚ÇÉ (Œ± : Type) extends Mul Œ± where
/-- Multiplication is associative -/
  mul_assoc‚ÇÉ : ‚àÄ a b c : Œ±, a * b * c = a * (b * c)

class AddMonoid‚ÇÉ (Œ± : Type) extends AddSemigroup‚ÇÉ Œ±, AddZeroClass Œ±

@[to_additive AddMonoid‚ÇÉ]
class Monoid‚ÇÉ (Œ± : Type) extends Semigroup‚ÇÉ Œ±, MulOneClass Œ±

attribute [to_additive existing] Monoid‚ÇÉ.toMulOneClass

export Semigroup‚ÇÉ (mul_assoc‚ÇÉ)
export AddSemigroup‚ÇÉ (add_assoc‚ÇÉ)

@[to_additive]
lemma left_inv_eq_right_inv' {M : Type} [Monoid‚ÇÉ M] {a b c : M} (hba : b * a = 1) (hac : a * c = 1) : b = c := by
  rw [‚Üê one_mul c, ‚Üê hba, mul_assoc‚ÇÉ, hac, mul_one b]

#check left_neg_eq_right_neg'

class AddCommSemigroup‚ÇÉ (Œ± : Type) extends AddSemigroup‚ÇÉ Œ± where
  add_comm : ‚àÄ a b : Œ±, a + b = b + a

@[to_additive AddCommSemigroup‚ÇÉ]
class CommSemigroup‚ÇÉ (Œ± : Type) extends Semigroup‚ÇÉ Œ± where
  mul_comm : ‚àÄ a b : Œ±, a * b = b * a

class AddCommMonoid‚ÇÉ (Œ± : Type) extends AddMonoid‚ÇÉ Œ±, AddCommSemigroup‚ÇÉ Œ±

@[to_additive AddCommMonoid‚ÇÉ]
class CommMonoid‚ÇÉ (Œ± : Type) extends Monoid‚ÇÉ Œ±, CommSemigroup‚ÇÉ Œ±

class AddGroup‚ÇÉ (G : Type) extends AddMonoid‚ÇÉ G, Neg G where
  neg_add : ‚àÄ a : G, -a + a = 0

@[to_additive AddGroup‚ÇÉ]
class Group‚ÇÉ (G : Type) extends Monoid‚ÇÉ G, Inv G where
  inv_mul : ‚àÄ a : G, a‚Åª¬π * a = 1

attribute [simp] Group‚ÇÉ.inv_mul AddGroup‚ÇÉ.neg_add

@[to_additive]
lemma inv_eq_of_mul [Group‚ÇÉ G] {a b : G} (h : a * b = 1) : a‚Åª¬π = b := by
  exact left_inv_eq_right_inv' (Group‚ÇÉ.inv_mul a) h

@[to_additive (attr := simp)]
lemma Group‚ÇÉ.mul_inv {G : Type} [Group‚ÇÉ G] {a : G} : a * a‚Åª¬π = 1 := by
  rw [‚Üê inv_mul a‚Åª¬π, inv_eq_of_mul (inv_mul a)]

@[to_additive]
lemma mul_left_cancel‚ÇÉ {G : Type} [Group‚ÇÉ G] {a b c : G} (h : a * b = a * c) : b = c := by
  rw [‚Üê one_mul b, ‚Üê one_mul c]
  rw [‚Üê Group‚ÇÉ.inv_mul a]
  rw [Semigroup‚ÇÉ.mul_assoc‚ÇÉ, Semigroup‚ÇÉ.mul_assoc‚ÇÉ]
  congr

@[to_additive]
lemma mul_right_cancel‚ÇÉ {G : Type} [Group‚ÇÉ G] {a b c : G} (h : b * a = c * a) : b = c := by
  rw [‚Üê mul_one b, ‚Üê mul_one c, ‚Üê Group‚ÇÉ.mul_inv (a := a)]
  rw [‚Üê Semigroup‚ÇÉ.mul_assoc‚ÇÉ, ‚Üê Semigroup‚ÇÉ.mul_assoc‚ÇÉ]
  congr

class AddCommGroup‚ÇÉ (G : Type) extends AddGroup‚ÇÉ G, AddCommMonoid‚ÇÉ G

@[to_additive AddCommGroup‚ÇÉ]
class CommGroup‚ÇÉ (G : Type) extends Group‚ÇÉ G, CommMonoid‚ÇÉ G


class MulZeroClass (R : Type) extends Mul R, Zero R where
  mul_zero : ‚àÄ a : R, a * 0 = 0
  zero_mul : ‚àÄ a : R, 0 * a = 0

class Ring‚ÇÉ (R : Type) extends AddGroup‚ÇÉ R, Monoid‚ÇÉ R, MulZeroClass R where
  left_distrib : ‚àÄ a b c : R, a * (b + c) = a * b + a * c
  right_distrib : ‚àÄ a b c : R, (a + b) * c = a * c + b * c

instance {R : Type} [Ring‚ÇÉ R] : AddCommGroup‚ÇÉ R :=
{
  Ring‚ÇÉ.toAddGroup‚ÇÉ with
  add_comm := by
    intro a b
    have h1 : (1 + 1) * (a + b) = a + (a + b) + b := by
      rw [Ring‚ÇÉ.left_distrib, Ring‚ÇÉ.right_distrib, Ring‚ÇÉ.right_distrib]
      simp
      rw [‚Üê add_assoc‚ÇÉ, ‚Üê add_assoc‚ÇÉ]
    have h2 : (1 + 1) * (a + b) = a + (b + a) + b := by
      rw [Ring‚ÇÉ.right_distrib, Ring‚ÇÉ.left_distrib]
      simp
      rw [‚Üê add_assoc‚ÇÉ, ‚Üê add_assoc‚ÇÉ]
    rw [h1] at h2
    sorry
    -- have h3 : (a + b) + b = (b + a) + b := by exact add_left_cancel‚ÇÉ h1
}

instance {R : Type} [Ring‚ÇÉ R] : CommMonoid‚ÇÉ R :=
{
  Ring‚ÇÉ.toMonoid‚ÇÉ with
  mul_comm := sorry
}


class SMul‚ÇÉ (Œ± : Type) (Œ≤ : Type) where
  /-- Scalar multiplication -/
  smul : Œ± ‚Üí Œ≤ ‚Üí Œ≤

infixr:73 " ‚Ä¢ " => SMul‚ÇÉ.smul


class Module‚ÇÅ (R : Type) [Ring‚ÇÉ R] (M : Type) [AddCommGroup‚ÇÉ M] extends SMul‚ÇÉ R M where
  zero_smul : ‚àÄ m : M, (0 : R) ‚Ä¢ m = 0
  one_smul : ‚àÄ m : M, (1 : R) ‚Ä¢ m = m
  mul_smul : ‚àÄ (a b : R) (m : M), (a * b) ‚Ä¢ m = a ‚Ä¢ b ‚Ä¢ m
  add_smul : ‚àÄ (a b : R) (m : M), (a + b) ‚Ä¢ m = a ‚Ä¢ m + b ‚Ä¢ m
  smul_add : ‚àÄ (a : R) (m n : M), a ‚Ä¢ (m + n) = a ‚Ä¢ m + a ‚Ä¢ n



@[ext]
structure MonoidHom‚ÇÅ (G H : Type) [Monoid‚ÇÉ G] [Monoid‚ÇÉ H]  where
  toFun : G ‚Üí H
  map_one : toFun 1 = 1
  map_mul : ‚àÄ g g', toFun (g * g') = toFun g * toFun g'


instance [Monoid‚ÇÉ G] [Monoid‚ÇÉ H] : CoeFun (MonoidHom‚ÇÅ G H) (fun _ ‚Ü¶ G ‚Üí H) where
  coe := MonoidHom‚ÇÅ.toFun

attribute [coe] MonoidHom‚ÇÅ.toFun

example [Monoid‚ÇÉ G] [Monoid‚ÇÉ H] (f : MonoidHom‚ÇÅ G H) : f 1 = 1 := f.map_one


@[ext]
structure AddMonoidHom‚ÇÅ (G H : Type) [AddMonoid‚ÇÉ G] [AddMonoid‚ÇÉ H]  where
  toFun : G ‚Üí H
  map_zero : toFun 0 = 0
  map_add : ‚àÄ g g', toFun (g + g') = toFun g + toFun g'

instance [AddMonoid‚ÇÉ G] [AddMonoid‚ÇÉ H] : CoeFun (AddMonoidHom‚ÇÅ G H) (fun _ ‚Ü¶ G ‚Üí H) where
  coe := AddMonoidHom‚ÇÅ.toFun

attribute [coe] AddMonoidHom‚ÇÅ.toFun

@[ext]
structure RingHom‚ÇÅ (R S : Type) [Ring‚ÇÉ R] [Ring‚ÇÉ S] extends MonoidHom‚ÇÅ R S, AddMonoidHom‚ÇÅ R S


class MonoidHomClass‚ÇÅ (F : Type) (M N : Type) [Monoid M] [Monoid N] where
  toFun : F ‚Üí M ‚Üí N
  map_one : ‚àÄ f : F, toFun f 1 = 1
  map_mul : ‚àÄ f g g', toFun f (g * g') = toFun f g * toFun f g'

def badInst [Monoid M] [Monoid N] [MonoidHomClass‚ÇÅ F M N] : CoeFun F (fun _ ‚Ü¶ M ‚Üí N) where
  coe := MonoidHomClass‚ÇÅ.toFun


class MonoidHomClass‚ÇÇ (F : Type) (M N : outParam Type) [Monoid M] [Monoid N] where
  toFun : F ‚Üí M ‚Üí N
  map_one : ‚àÄ f : F, toFun f 1 = 1
  map_mul : ‚àÄ f g g', toFun f (g * g') = toFun f g * toFun f g'

instance [Monoid M] [Monoid N] [MonoidHomClass‚ÇÇ F M N] : CoeFun F (fun _ ‚Ü¶ M ‚Üí N) where
  coe := MonoidHomClass‚ÇÇ.toFun

attribute [coe] MonoidHomClass‚ÇÇ.toFun
