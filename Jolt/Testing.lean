import Mathlib.Data.Nat.Basic

def first (xs : List Î±) : Option Î± := xs[0]?

def firstThird (xs : List Î±) : Option (Î± Ã— Î±) :=
  match xs[0]? with
  | none => none
  | some first =>
    match xs[2]? with
    | none => none
    | some third => some (first, third)

def andThen (opt : Option Î±) (next : Î± â†’ Option Î²) : Option Î² :=
  match opt with
  | none => none
  | some x => next x

def firstThird' (xs : List Î±) : Option (Î± Ã— Î±) :=
  andThen xs[0]? fun first =>
    andThen xs[2]? fun third =>
      some (first, third)

def firstThird'' (xs : List Î±) : Option (Î± Ã— Î±) :=
  andThen (first xs) (Î» x => andThen (xs[2]?) (Î» y => some (x, y)))

#eval firstThird [1, 2, 3]
#eval firstThird' [1, 2, 3]
#eval firstThird'' [1, 2, 3]

inductive Except' (Îµ : Type) (Î± : Type) : Type
  | ok : Î± â†’ Except' Îµ Î±
  | err : Îµ â†’ Except' Îµ Î±
deriving BEq, Hashable, Repr

def get (xs : List Î±) (i : Nat) : Except' String Î± :=
  match xs[i]? with
  | none => Except'.err s!"Index {i} out of bounds (maximum is {xs.length - 1})"
  | some x => Except'.ok x

def plants : List String := ["ðŸŒ±", "ðŸŒ·", "ðŸŒ¸", "ðŸŒ¹", "ðŸŒ»", "ðŸŒ¼", "ðŸŒ¾", "ðŸŒ¿"]

#eval get plants 0
#eval get plants 10

def first' (xs : List Î±) : Except' String Î± := get xs 0

def ok' (x : Î±) : Except' Îµ Î± := Except'.ok x

def fail' (e : Îµ) : Except' Îµ Î± := Except'.err e

def andThen' (opt : Except' Îµ Î±) (next : Î± â†’ Except' Îµ Î²) : Except' Îµ Î² :=
  match opt with
  | Except'.ok x => next x
  | Except'.err e => Except'.err e

infixl:55 " ~~> " => andThen'

def firstThird''' (xs : List Î±) : Except' String (Î± Ã— Î±) :=
  first' xs ~~> fun x =>
    get xs 2 ~~> fun y =>
      ok' (x, y)

class Monad' (m : Type â†’ Type) where
  pure : Î± â†’ m Î±
  bind : m Î± â†’ (Î± â†’ m Î²) â†’ m Î²

instance : Monad' Option where
  pure x := some x
  bind opt next :=
    match opt with
    | none => none
    | some x => next x

instance : Monad' (Except' Îµ) where
  pure x := Except'.ok x
  bind attempt next :=
    match attempt with
    | Except'.ok x => next x
    | Except'.err e => Except'.err e

def pure' [Monad' m] (x : Î±) : m Î± := Monad'.pure x

infixl:55 " >>=' " => Monad'.bind

def firstThirdFifth [Monad' m] (lookup : List Î± â†’ Nat â†’ m Î±) (xs : List Î±) : m (Î± Ã— Î± Ã— Î±) :=
  lookup xs 0 >>=' fun first =>
    lookup xs 2 >>=' fun third =>
      lookup xs 4 >>=' fun fifth =>
        pure' (first, third, fifth)

def firstThirdFifth' [Monad' m] (lookup : List Î± â†’ Nat â†’ m Î±) (xs : List Î±) : m (Î± Ã— Î± Ã— Î±) :=
  Monad'.bind (lookup xs 0) (fun first =>
    Monad'.bind (lookup xs 2) (fun third =>
      Monad'.bind (lookup xs 4) (fun fifth =>
        Monad'.pure (first, third, fifth))))

#eval firstThirdFifth get plants
#eval firstThirdFifth' get plants

theorem triv (a b : Nat) (h : a < b) (h' : a â‰¥ b) : False :=
  Nat.not_lt_of_ge h' h

#eval triv 1 2 (by decide) (by decide)
