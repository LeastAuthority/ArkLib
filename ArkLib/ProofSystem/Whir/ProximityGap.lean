/-
Copyright (c) 2025 ArkLib Contributors. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Least Authority
-/

import ArkLib.ProofSystem.Whir.ProximityGen
import ArkLib.Data.CodingTheory.SmoothReedSolomon

/-! Reed Solomon codes (over fields ?) have proximity generators -/


namespace RSGenerator

open ReedSolomon Generator SmoothDomain

/- Smooth Reed Solomon codes C:= RSC[F,L,d] have proximity generators for any given `l: ‚Ñï`
   with generator function Gen(l) : ùîΩ ‚Üí ùîΩÀ° ; Œ± ‚Üí (1,Œ±, Œ±¬≤, ‚Ä¶, Œ±À°‚Åª¬π),
   Bstar(C,l):= ‚àöœÅ
   err(C,l,Œ¥) :=  (l-1)2·µê for Œ¥ in (0, (1-œÅ)/ (2|ùîΩ|))
                  (l-1)+2¬≤·µê7(|F|(2 min{1-‚àöœÅ-Œ¥, ‚àöœÅ/20})‚Å∑)  -/
noncomputable def reedSolomonProximityGen
  {F : Type*} [Field F]  [Fintype F] [DecidableEq F]
  {Œπ : Finset F} [DecidableEq Œπ] [Nonempty Œπ]
  (l : ‚Ñï)
  (domain : Œπ ‚Ü™ F)
  (k : ‚Ñï) [Smooth domain k]
  (m : ‚Ñï)
  : ProximityGenerator F Œπ :=
    let œÅ := 2^m / (Fintype.card Œπ)
    { C      :=  smoothCode F Œπ domain k m,
      l      := l,
      GenFun := fun r j => r ^ (j : ‚Ñï),
      BStar  := Real.sqrt œÅ ,
      err   := fun Œ¥ => ENNReal.ofReal (
        if Œ¥ ‚â§ (1 - œÅ) / 2 then
          ((l- 1) * 2^m) / (œÅ  * Fintype.card F )
        else
          let min_val := min (1 - (Real.sqrt œÅ) - Œ¥ ) ((Real.sqrt œÅ) / 20)
          ((l - 1) * (2^(2* m))) / ((Fintype.card F) * (2 * min_val)^7)
      ),
      proximity := by sorry -- Proof will be analog to the proximity gap lemma proof
    }

end RSGenerator
